import React, { useEffect, useState } from 'react';

import { Card, FormField, Loader } from '../components';

const RenderCards = ({ data, title }) => {
  if (data?.length > 0) {
    return (
      data.map((post) => <Card key={post._id} {...post} />)
    );
  }

  return (
    <h2 className="mt-5 font-bold text-primary dark:text-primary-dark text-xl uppercase">{title}</h2>
  );
};

const Home = () => {
  const [loading, setLoading] = useState(false);
  const [allPosts, setAllPosts] = useState(null);

  const [searchText, setSearchText] = useState('');
  const [searchTimeout, setSearchTimeout] = useState(null);
  const [searchedResults, setSearchedResults] = useState(null);
  const [error, setError] = useState('');

  const fetchPosts = async () => {
    setLoading(true);
    setError('');

    try {
      const response = await fetch('https://dall-e-zf26.onrender.com/api/v1/post', {
        method: 'GET',
        headers: {
          'Content-Type': 'application/json',
        },
      });

      if (response.ok) {
        const result = await response.json();
        setAllPosts(result.data.reverse());
      } else {
        const errorText = await response.text();
        throw new Error(`Failed to fetch posts: ${response.status} ${errorText}`);
      }
    } catch (err) {
      console.error('Error fetching posts:', err);
      setError('Failed to load posts. Please try again later.');
    } finally {
      setLoading(false);
    }
  };

  useEffect(() => {
    fetchPosts();
  }, []);

  const handleSearchChange = (e) => {
    clearTimeout(searchTimeout);
    setSearchText(e.target.value);

    setSearchTimeout(
      setTimeout(() => {
        if (e.target.value === '') {
          setSearchedResults(null);
          return;
        }
        
        if (!allPosts) return;
        
        const searchResult = allPosts.filter((item) => 
          item.name.toLowerCase().includes(e.target.value.toLowerCase()) || 
          item.prompt.toLowerCase().includes(e.target.value.toLowerCase())
        );
        setSearchedResults(searchResult);
      }, 500),
    );
  };

  return (
    <section className="max-w-7xl mx-auto">
      <div>
        <h1 className="font-extrabold text-text-primary dark:text-text-primary-dark text-[32px] sm:text-[40px] transition-colors duration-200">
          Joe's Community Showcase
        </h1>
        <p className="mt-2 text-text-secondary dark:text-text-secondary-dark text-[16px] max-w-[500px] transition-colors duration-200">
          Browse through a collection of imaginative and visually stunning images by friends and family generated by DALL-E AI
        </p>
      </div>

      <div className="mt-16">
        <FormField
          labelName="Search through posts below"
          type="text"
          name="text"
          placeholder="Search posts..."
          value={searchText}
          handleChange={handleSearchChange}
        />
      </div>

      <div className="mt-10">
        {loading ? (
          <div className="flex justify-center items-center">
            <Loader />
          </div>
        ) : error ? (
          <div className="flex justify-center items-center">
            <p className="text-red-500 dark:text-red-400 text-center">{error}</p>
            <button 
              onClick={fetchPosts} 
              className="ml-2 px-4 py-2 bg-primary hover:bg-primary-dark text-white rounded-md transition-colors duration-200"
            >
              Retry
            </button>
          </div>
        ) : (
          <>
            {searchText && (
              <h2 className="font-medium text-text-secondary dark:text-text-secondary-dark text-xl mb-3 transition-colors duration-200">
                Showing Results for <span className="text-text-primary dark:text-text-primary-dark transition-colors duration-200">{searchText}</span>:
              </h2>
            )}
            <div className="grid lg:grid-cols-4 sm:grid-cols-3 xs:grid-cols-2 grid-cols-1 gap-3 md:gap-5">
              {searchText ? (
                <RenderCards
                  data={searchedResults}
                  title="No Search Results Found"
                />
              ) : (
                <RenderCards
                  data={allPosts}
                  title="No Posts Yet"
                />
              )}
            </div>
          </>
        )}
      </div>
    </section>
  );
};

export default Home;